const axios = require('axios');
const cron = require('node-cron');

// ุฏุงูุฉ ูุฅุถุงูุฉ 15 ุฏูููุฉ ุฅูู ุงูููุช
function addFifteenMinutes(time) {
  const timeParts = time.split(":");
  let hour = parseInt(timeParts[0], 10);
  let minute = parseInt(timeParts[1], 10);

  minute += 15;
  if (minute >= 60) {
    minute -= 60;
    hour += 1;
  }
  return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
}

// ุชุตุฏูุฑ ูุธููุฉ ุงูุฅุดุนุงุฑุงุช
module.exports = (db) => {
  // ุชุดุบูู ุงูุฌุฏููุฉ ูู ุฏูููุฉ
  cron.schedule('* * * * * *', () => {
    console.log('ุงูุชุญูู ูู ุงูููุงุนูุฏ ูุฅุฑุณุงู ุงูุฅุดุนุงุฑุงุช...');

    const now = new Date();
    const nowTimestamp = now.getTime(); // ุงูุทุงุจุน ุงูุฒููู ุงูุญุงูู

    // ุงูููุนุฏ ุจุนุฏ 24 ุณุงุนุฉ ุจุงูุถุจุท
    const targetTime = new Date(nowTimestamp + 24 * 60 * 60 * 1000);
    const targetDate = targetTime.toISOString().split('T')[0]; // ุชุงุฑูุฎ ุงููุฏู
    const targetHour = String(targetTime.getHours()).padStart(2, '0'); // ุงูุณุงุนุฉ
    const targetMinute = String(targetTime.getMinutes()).padStart(2, '0'); // ุงูุฏูููุฉ
    const targetTimeString = `${targetHour}:${targetMinute}`; // ุงูููุช ุจุตูุบุฉ HH:MM

    const query = `
      SELECT r.record_id, r.child_id, r.appointment_day, r.appointment_time, r.parent_id, d.device_token
      FROM vaccinationrecords r
      JOIN device_tokens d ON r.parent_id = d.parent_id
      WHERE r.appointment_day = ? 
        AND r.appointment_time = ? 
        AND r.reason = "ุทุนู" 
        AND r.notification_sent = FALSE
    `;

    db.query(query, [targetDate, targetTimeString], (err, results) => {
      if (err) {
        console.error('ุฎุทุฃ ุฃุซูุงุก ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช:', err);
        return;
      }

      if (results.length === 0) {
        console.log('ูุง ููุฌุฏ ููุงุนูุฏ ูุฅุฑุณุงู ุฅุดุนุงุฑุงุช.');
        return;
      }

      results.forEach((appointment) => {
        if (!appointment.device_token) {
          console.error(`ูุง ููุฌุฏ device_token ููููุนุฏ ุฑูู: ${appointment.record_id}`);
          return;
        }

        const notificationBody = {
          appId: 25739, // ุงุณุชุจุฏู ุจู App ID ุงูุฎุงุต ุจู
          appToken: '2aRpJy3CQV9MGRCroR0Qqk', // ุงุณุชุจุฏู ุจู App Token ุงูุฎุงุต ุจู
          title: 'ุชุฐููุฑ ุจููุนุฏ ุงูุชุทุนูู',
          body: `ูุง ุชูุณ ุฃู ูุฏูู ุทุนู ูุทููู ุบุฏูุง ูู ุงูุณุงุนุฉ ${appointment.appointment_time} ูุฑุงุฌุน ุทุจูุจ ุงูุฃุทูุงู ูู ุงูุณุงุนุฉ ${addFifteenMinutes(appointment.appointment_time)}.๐`,
          deviceToken: appointment.device_token,
          dateSent: new Date().toISOString(),
        };

        axios.post('https://app.nativenotify.com/api/notification', notificationBody)
          .then(() => {
            console.log(`ุชู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ุจูุฌุงุญ ููููุนุฏ ุฑูู: ${appointment.record_id}`);

            // ุชุญุฏูุซ ุญุงูุฉ ุงูุฅุดุนุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
            const updateQuery = `
              UPDATE vaccinationrecords
              SET notification_sent = TRUE
              WHERE record_id = ?
            `;
            db.query(updateQuery, [appointment.record_id], (updateErr) => {
              if (updateErr) {
                console.error(`ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ุญุงูุฉ ุงูุฅุดุนุงุฑ ููููุนุฏ ุฑูู: ${appointment.record_id}`, updateErr);
              }
            });
          })
          .catch((error) => {
            console.error(`ูุดู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ููููุนุฏ ุฑูู: ${appointment.record_id}`, error);
          });
      });
    });
  });
};
